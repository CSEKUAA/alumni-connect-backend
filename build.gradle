plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.flywaydb.flyway' version '6.4.3'
}


group = 'org.csekuaa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 17
targetCompatibility = 17

springBoot {
    buildInfo()
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencyManagement {
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}
test {
    useJUnitPlatform()
}
flyway {
    url = 'jdbc:mysql://localhost/csekuaa'
    user = 'root'
    password = 'rootroot'
}

tasks.register('installLocalGitHook', Copy) {
    from file('hooks/pre-commit')
    into file('.git/hooks')

    doLast {
        if (System.getProperty('os.name').toLowerCase().contains('win')) {
            // Windows-specific handling
            def hookFile = file('.git/hooks/pre-commit')
            hookFile.text = hookFile.text.replaceAll('\r\n', '\n') // Convert Windows line endings to Unix style
        } else {
            // Unix-like systems (macOS and Linux)
            def hookFile = file('.git/hooks/pre-commit')
            hookFile.setExecutable(true) // Make the script executable
        }
        println "Git hook installed successfully."
    }
}

build.dependsOn installLocalGitHook


bootJar {
    enabled = true
}
